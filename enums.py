TURNOUT_THROWN = 'TURNOUT_THROWN'
TURNOUT_CLOSED = 'TURNOUT_CLOSED'
TURNOUT_UNKNOWN = 'TURNOUT_UNKNOWN'

SENSOR_ACTIVE = 'SENSOR_ACTIVE'
SENSOR_INACTIVE = 'SENSOR_INACTIVE'
SENSOR_UNKNOWN = 'SENSOR_UNKNOWN'

SIGNAL_CLEAR = 'SIGNAL_CLEAR'
SIGNAL_ADVANCE_APPROACH = 'SIGNAL_ADVANCE_APPROACH'
SIGNAL_APPROACH = 'SIGNAL_APPROACH'
SIGNAL_APPROACH_CLEAR_SIXTY = 'SIGNAL_APPROACH_CLEAR_SIXTY'
SIGNAL_APPROACH_CLEAR_FIFTY = 'SIGNAL_APPROACH_CLEAR_FIFTY'
SIGNAL_APPROACH_DIVERGING = 'SIGNAL_APPROACH_DIVERGING'
SIGNAL_APPROACH_RESTRICTING = 'SIGNAL_APPROACH_RESTRICTING'
SIGNAL_RESTRICTING = 'SIGNAL_RESTRICTING'

SIGNAL_DIVERGING_CLEAR = 'SIGNAL_DIVERGING_CLEAR'
SIGNAL_DIVERGING_CLEAR_LIMITED = 'SIGNAL_DIVERGING_CLEAR_LIMITED'
SIGNAL_DIVERGING_ADVANCE_APPROACH = 'SIGNAL_DIVERGING_ADVANCE_APPROACH'
SIGNAL_DIVERGING_APPROACH = 'SIGNAL_DIVERGING_APPROACH'
SIGNAL_DIVERGING_RESTRICTING = 'SIGNAL_DIVERGING_RESTRICTING'

SIGNAL_STOP = 'SIGNAL_STOP'

def ConvertAspectToDivergingAspect(aspect):
	if aspect.startswith('SIGNAL_APPROACH_'):
		return SIGNAL_DIVERGING_APPROACH

	return {
		SIGNAL_CLEAR: SIGNAL_DIVERGING_CLEAR,
		SIGNAL_ADVANCE_APPROACH: SIGNAL_DIVERGING_ADVANCE_APPROACH,
		SIGNAL_APPROACH: SIGNAL_DIVERGING_APPROACH,
		SIGNAL_RESTRICTING: SIGNAL_DIVERGING_RESTRICTING,
	}.get(aspect, SIGNAL_STOP)